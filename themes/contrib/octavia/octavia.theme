<?php

/**
 * @file
 * Theme functions.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_library_info_alter().
 */
function octavia_library_info_alter(&$libraries, $extension) {
  if ($extension === 'bulma' && isset($libraries['global'])) {
    // Since the replaced library files are no longer located in a directory
    // relative to the original extension, specify an absolute path (relative
    // to DRUPAL_ROOT / base_path()) to the new location.
    $base_path = '/' . drupal_get_path('theme', 'octavia');
    $css_file_path = '/dist/css/modified-bulma.css';
    if (\Drupal::moduleHandler()->moduleExists('skins') && $active_skin = \Drupal::config('octavia.settings')->get('skin')) {
      $css_file_path = '/dist/css/' . $active_skin . '.css';
    }
    $libraries['global']['css']['base'] = [
      $base_path . $css_file_path => [],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.
 *
 * Adds a region to the block content atributes.
 */
function octavia_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $block_id = $variables['elements']['#id'];
    if ($block = Block::load($block_id)) {
      $variables['content']['#attributes']['region'] = $block->getRegion();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function octavia_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['search_api_fulltext'])) {
    // Adjust size and update the placeholder.
    $form['search_api_fulltext']['#size'] = 15;
    $form['search_api_fulltext']['#placeholder'] = t('Search');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form.
 */
function octavia_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (($element['#form_id'] === 'views_exposed_form') && isset($element['#view_id']) && ($element['#view_id'] === 'search')) {
    $suggestions[] = 'form__views_exposed_form_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for menu.
 *
 * Adds a template suggestion based on region name.
 */
function octavia_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    // Add a theme suggestion for the specific menu in this region.
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['attributes']['region'];
    // Add a theme suggestion for all menus in in this region.
    $suggestions[] = 'menu__' . $variables['attributes']['region'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block.
 *
 * Adds a template suggestion based on region name.
 */
function octavia_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Region suggestion for blocks in Drupal.
  if (isset($variables['elements']['#id'])) {
    if ($block = Block::load($variables["elements"]["#id"])) {
      $region = $block->getRegion();
      $suggestions[] = 'block__' . $region;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.
 *
 * Converts the search menu link title to an icon.
 */
function octavia_preprocess_menu(array &$variables) {
  if (isset($variables['items']['views_view:views.search.page_1'])) {
    $variables['items']['views_view:views.search.page_1']['title'] = Markup::create('<span class="icon"><i class="fa fa-search"></i></span>');
  }
}

/**
 * Implements hook_preprocess_HOOK() for comment.
 *
 * Shortens and stacks username and submitted date.
 */
function octavia_preprocess_comment(array &$variables) {
  $comment = $variables['elements']['#comment'];
  if (isset($comment->in_preview)) {
    $variables['permalink_url'] = new Url('<front>');
  }
  else {
    $variables['permalink_url'] = $comment->permalink();
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Styles more link as a button.
 *
 * @see @octavia/form/container--more-link--block.html.twig
 */
function octavia_element_info_alter(&$type) {
  if (isset($type['more_link'])) {
    // Add classes to style the link as a button.
    // While we could also alter the attributes of the container wrapper here,
    // for greater flexibility we instead leave that to templates such as
    // @octavia/form/container--more-link--block.html.twig.
    $type['more_link']['#attributes']['class'] = [
      'button',
      'is-rounded',
      'is-black',
    ];
    // Add our callback to the beginning of the array so it can modify the
    // $element['#title'] property ahead of core's
    // \Drupal\Core\Render\Element\MoreLink::preRenderLink(), which sets
    // $element['#markup'].
    array_unshift($type['more_link']['#pre_render'], '_octavia_pre_render_more_link');
  }
}

/**
 * Pre-render callback to add an icon to a link element.
 *
 * @param array $element
 *   A structured array whose keys form the arguments to
 *   \Drupal\Core\Utility\LinkGeneratorInterface::generate():
 *   - #title: The link text.
 *   - #url: The URL info either pointing to a route or a non routed path.
 *   - #options: (optional) An array of options to pass to the link generator.
 *
 * @return array
 *   The passed-in element containing an icon in the #title.
 */
function _octavia_pre_render_more_link($element) {
  $element['#title'] = [
    'icon' => [
      'span' => [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'class' => ['icon'],
        ],
        'i' => [
          '#type' => 'html_tag',
          '#tag' => 'i',
          '#attributes' => [
            'class' => ['fa', 'fa-plus'],
          ],
        ],
      ],
    ],
    'title' => [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => $element['#title'],
    ],
  ];

  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for field.
 *
 * Resets variables to those of the field value inline template.
 *
 * This approach facilitates use of the "title" class on a wrapping element
 * such as an <h2>.
 */
function octavia_preprocess_field(&$variables) {
  $element = $variables['element'];
  $field_type = $element['#field_type'];
  if ($field_type === 'ds') {
    $view_mode = $element['#ds_view_mode'] ?? $element['#view_mode'];
    switch ($element['#field_name']) {
      // Used for media, taxonomy_term, and user entities.
      case 'name':
      case 'node_title':
        if ($children = Element::children($element)) {
          $key = key($children);
          $child = $element[$key][0];
          $variables = array_merge($variables, $child['#context']);
          $variables['view_mode'] = $view_mode;
        }
        break;
    }
  }
}
